#!/usr/bin/env python

import requests
import re
import urlparse
from BeautifulSoup import BeautifulSoup

class Scanner:
    def __init__(self, url, ignore_links): #this is the constructor function
        self.session = requests.Session() #represents our current session so every time we make requests it is treated as being taking place in the same session
        self.target_url = url
        self.target_links = []
        self.links_to_ignore = ignore_links #links like logout links that will terminate the current session and we wont send requests to them

    def extract_links_from(self, url):
        response = self.session.get(url) #using the current session to make the request
        return re.findall('(?:href=")(.*?)"', response.content)  # finding all links'

    def crawl(self, url=None): #default value
        if url == None:
            url = self.target_url #the function has been called from outside the class so we will pass self.target_url to it
        href_links = self.extract_links_from(url)
        for link in href_links:
            link = urlparse.urljoin(url, link)  # converting relative url to the complete url

            if "#" in link:
                link = link.split("#")[0]  # spliting the link so that the same link loading different parts of webpage is not stored twice

            if self.target_url in link and link not in self.target_links and link not in self.links_to_ignore:
                self.target_links.append(link) #storing all links
                print(link)
                self.crawl(link)  # dfs like recursive call

    def extract_forms(self, url):
        response = self.session.get(url)
        parsed_html = BeautifulSoup(response.content)  # calling beautiful soup and giving it html page that will be returned
        return parsed_html.findAll("forms")  # find all forms elements

    def submit_form(self, form, value, url):
        action = form.get("action")  # actions is the attribute denoting the site where form will get submitted
        post_url = urlparse.urljoin(url, action)  # urlparse makes relative url to complete or full url
        method = form.get("method")  # method used in form

        inputs_list = form.findAll("input")  # all in inputs in the form
        post_data = {}
        for input in inputs_list:
            input_name = input.get("name")
            input_type = input.get("type")
            input_value = input.get("value")
            if input_type == "text":
                input_value = value
            post_data[input_name] = input_value  # adding data to the dict
        if method == "post": #checking if the method is post
            return self.session.post(post_url, data=post_data)  # posting form
        return self.session.get(post_url, params=post_data) #otherwise we will use the get method to send data

    def run_scanner(self):
        for link in self.target_links:
            forms = self.extract_forms(link)
            for form in forms: #discovering in form
                print("[+] Testinf form in " + link)
                is_vulnerable_to_xss = self.test_xss_in_form(form, link)
                if is_vulnerable_to_xss:
                    print("\n\n[***] XSS discovered in " + link + " in the following form")
                    print(form)

            if "=" in link: #this sign denotes that it sends data to the website, discovering in links
                print("\n\n[+] Testing " + link)
                is_vulnerable_to_xss = self.test_xss_in_link(link)
                if is_vulnerable_to_xss:
                    print("[***] Discovered XSS in " + link)

    def test_xss_in_link(self, url):
        xss_test_script = "<script>alert('text')</script>"
        url = url .replace("=", "=" + xss_test_script) #replacing = in links send javascript code
        response = self.session.get(url)

        return xss_test_script in response.content #the script was stored

    def test_xss_in_form(self, form, url):
        xss_test_script = "<script>alert('text')</script>"
        response = self.submit_form(form,xss_test_script, url)
        return xss_test_script in response.content #the script was stored
    
 
